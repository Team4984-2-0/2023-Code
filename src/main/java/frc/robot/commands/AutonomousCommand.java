// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.Robot;
import frc.robot.subsystems.Grabber;
import frc.robot.subsystems.Winch;
import frc.robot.subsystems.PIDDriveTrain;
import java.util.concurrent.TimeUnit;



 
public class AutonomousCommand extends CommandBase {

    private Grabber m_Grabber;
    private Winch m_Winch;
    private PIDDriveTrain m_DriveTrain;
    private int sleepCounter;


    public AutonomousCommand(Grabber Grabber_sub, Winch Winch_sub, PIDDriveTrain DriveTrain_sub) {
        m_Grabber = Grabber_sub;
        m_Winch = Winch_sub;
        m_DriveTrain = DriveTrain_sub;
        sleepCounter = 0;

        //SmartDashboard.getData("Auto Mode");

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Wait for a certain amount of time, easier to use this rather than repeating the try/catch
    /*private void wait(int timeInMS){
        try {
            Thread.sleep(timeInMS);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }*/

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        
/*         String testAutoData = SmartDashboard.getString("Auto mode", "none");
        // Not done yet
        try{
            switch(testAutoData){
                default:
                    Robot.printYellow("Nothing special.");
                    m_DriveTrain.drive(0.5, 0.5);
                    //wait(1000);
                    m_DriveTrain.drive(0, 0);
                    break;
            }
        }
        catch(IllegalArgumentException e){
            Robot.printYellow("Something went wrong trying to run autonomous.");
        } */







    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
         
        if (sleepCounter > Constants.sleepCounterConstant)
        {
            m_DriveTrain.drive(0, 0);
            sleepCounter = 0;
            return true;
        }
        else 
            return false;


    }

    @Override
    public boolean runsWhenDisabled() {

        return false;


    }
}
